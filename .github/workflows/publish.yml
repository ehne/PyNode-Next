# This is a basic workflow to help you get started with Actions

name: publish build

# Controls when the workflow will run
on:
  workflow_run:
    workflows: ["commit release check"]
    branches: [main]
    types: 
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_for_new_version:
    name: Check for new version
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{steps.semantic.outputs.new-release-published}}
      version: ${{steps.semantic.outputs.release-version}}
      release_notes: ${{steps.semantic.outputs.release-notes}}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # run semantic release so we can generate a new version
      - name: Run semantic release
        uses: codfish/semantic-release-action@additional-packages
        id: semantic
        with:
          dry_run: true
          additional_packages: |
            ['semantic-release-gitmoji']
          plugins: |
            ['semantic-release-gitmoji']
          branches: | 
            ['main']
            
  zip_and_upload:
    needs: check_for_new_version
    if: ${{needs.check_for_new_version.outputs.new_release_published == 'true'}}
    name: zip and upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # zips the pynode_next folder
      - name: Zip up the folder
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r pynode_next.zip pynode_next
      
      - name: create release notes md file
        run: touch RELEASE.md
      
      - name: write release notes to file
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: RELEASE.md
          contents: ${{needs.check_for_new_version.outputs.release_notes}}
          
       #upload it to the artifacts for now   
      - name: Upload release ${{steps.pynode_ver.outputs.ver}}
        run: gh release create ${{ env.VERSION }} -F "${{ env.MESSAGE_LOCATION }}" -t "${{ env.NAME }}" ${{ env.FILES }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          VERSION: v${{needs.check_for_new_version.outputs.version}}
          MESSAGE_LOCATION: RELEASE.md
          NAME: ${{needs.check_for_new_version.outputs.version}}
          FILES: pynode_next.zip
